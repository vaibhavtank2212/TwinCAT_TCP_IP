<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_TCP_COM" Id="{17040e54-2eca-43ad-af58-8cb09b7444f5}" SpecialFunc="None">
    <Declaration><![CDATA[// 18.4.2019    NetString lenght without endcharacters
// 3.4.2019     + Option "sNetStringSep"
// 26.3.2019   	+ Option "bAddNetStingLen"
//				+ Option "enuOptions.CheckAndTerminate_Custom"				
// 
// former known as fb_TCPIP_COMMUNICATION
FUNCTION_BLOCK FB_TCP_COM
VAR_INPUT
	
	bEnable			:BOOL		:= TRUE;	(* This function *)
	(* com parameter  *)
	bAsClient		:BOOL		:= FALSE;	(* FALSE -> TCP - Server / TCP-Client *)	
	nPort			:UINT		:= 2000;		(* SERVER: port to provide / CLIENT: port on server  				*)
	sIPAddress		:STRING (80):= '127.0.0.1';	(* SERVER: own network address to use / CLIENT: address of server 	*)
	(* send options*)
	tFireDelay		:TIME		:= T#0S;	(* betwenn two messages *)
	bCompactMessage	:BOOL		:= TRUE;	(* forces to send all messages AS one telegram - partner has to splitt messages!!!  *)
	xEOT			:BYTE		:= 16#03;	(* end of text character, use option "enuOptions.CheckAndTerminate_X" to activate	*)
	bAddNetStingLen	:BOOL		:= FALSE;	(* adds string len XX:yyyyyy in front of transmission								*)
	sNetStringSep	:STRING(1)	:= ':';
	ptReceiveBuffer	:POINTER TO strBufferHeader;	(* find receive data and coordination flag in here  *)
END_VAR

VAR_OUTPUT
	bConnected		:BOOL;
	bError			:BOOL;	
	nErrId			:UDINT;				(* FB_SocketConnect Error ID  		                                         *)
	sError			:STRING[80];		(* Error text (out of TC help system 	                                     *)
END_VAR
VAR
	// TCP Connection
	//tcp_ClientConnection	:FB_ClientServerConnection;
	
	// https://infosys.beckhoff.com/index.php?content=../content/1031/tf6310_tc3_tcpip/27021597848412555.html&id=
	(* client *)
	fbConnect       	: FB_SocketConnect 	:= ( sSrvNetId := '' );
   	fbClose        		: ARRAY[1..2] OF  FB_SocketClose;
	(* server *)
	fbListen			: FB_SocketListen;
	fbAccept			: FB_SocketAccept;
    fbSocketSend 		: FB_SocketSend 	:= ( sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT );
    fbSocketReceive 	: FB_SocketReceive 	:= ( sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT );
	fbSocketCloseAll : FB_SocketCloseAll;
	
	hListener          	: T_HSOCKET;
	hSocket         	: T_HSOCKET;
	
	x:int; (* xxx *)

	
	
	//Helpers
	iSTEP				:INT	:= 3;	(* main sequence*)
	ioldStep			:INT;
	tSTEP				:TON;
	TimeInStep 			:TIME;	
	i,uiLEN				:UINT; 
	strDiagnose			:STRING; 
	udiSLEN 			:UDINT; (* num of bytes to befired *)
	udiHelp				:UDINT; 
	aServiceBuffer  	:ARRAY[0..Sewts_TCP.MAX_QueueData] OF BYTE ;	(* DATA for queue entry*)
	
	//Data Structures
	strSendQueue		:strQueueContent;
	strSendBuffer		:strBufferHeader;

	nPort_OLD			:UINT;				
	sIPAddress_OLD		:STRING;	
	bAsClient_OLD		:BOOL;

	sNetString			:STRING(10)	:= '';
	iTerminaterNetLen	:UDINT;

	sSrvNetId			:STRING		:= ''; 	
END_VAR

VAR CONSTANT 
	STEP_Error 		:INT 	:= -2;	
	STEP_ONConnect	:INT	:= 10;
	STEP_Disconnect	:INT	:= 21;		
	STEP_WAIT_SEND	:INT   	:= 11; 
	TimeOut			:TIME	:= T#2S;
	tClientLookup	:TIME 	:= T#5100MS; (* (server)  timeout to enable accept   *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TimingSystem();

CheckReceiveData();

CASE iSTEP OF
	-3:	(*******************************************************)
	 	fbSocketCloseAll( sSrvNetId:= '', bExecute:= TRUE, tTimeout:= T#10S );
		IF NOT fbSocketCloseAll.bBusy THEN
			iSTEP	:= iSTEP+1;
		END_IF;		

	STEP_Error: (** -2 *****************************************************)	 
	 	strDiagnose := 'STEP ERROR ';
		fbSocketCloseAll( bExecute:= FALSE );
		FOR i := 1  TO 2 DO 
			fbClose[i].sSrvNetId 	:= sSrvNetId;
			fbClose[i].tTimeout		:= DEFAULT_ADS_TIMEOUT;
			fbClose[i]( bExecute	:= FALSE );
			
			CASE i OF 
				1: fbClose[i].hSocket:= hListener;
				2: fbClose[i].hSocket:= hSocket;
			END_CASE
			fbClose[i]( bExecute	:= TRUE);
		END_FOR; 	
		(* reset all executes *)
		fbConnect		(bExecute 	:= FALSE);
		
		iSTEP := iSTEP + 1; 
		
	-1: (*******************************************************)
		strDiagnose := 'error pause';
		FOR i := 1  TO 2 DO 
			fbClose[i]( bExecute	:= FALSE );
		END_FOR; 
		bConnected	:= FALSE;
		
		IF TimeInStep > TimeOut THEN
			bError	:= FALSE;
			iSTEP 	:= 0;
		END_IF

	0: 	(*******************************************************)
		strDiagnose := 'wait for enable';
		IF bEnable THEN
			iSTEP := iSTEP + 1; 
		END_IF
		
	1: 	(*******************************************************)
		strDiagnose := 'start / init';

		nPort_OLD			:= nPort;				
		sIPAddress_OLD		:= sIPAddress;	
		bAsClient_OLD		:= bAsClient;	
 		bConnected			:= FALSE;
		
		IF bAsClient THEN 
			iSTEP := iSTEP+1;
		ELSE
			iSTEP := 4;	
		END_IF; 		
		
	2: 	(*******************************************************)
		strDiagnose := 'Connect as CLIENT to a SERVER';
		fbConnect ( bExecute 	:= FALSE );
		fbConnect (	bExecute	:= TRUE,
					sSrvNetId	:= sSrvNetId,
					sRemoteHost	:= sIPAddress,
					nRemotePort	:= nPort);
	
		iSTEP	:= iSTEP + 1; 

	3: 	(*******************************************************)
		strDiagnose := 'Connect as CLIENT end';
		fbConnect ( bExecute 	:= FALSE );
       	IF NOT fbConnect.bBusy THEN
            IF NOT fbConnect.bError THEN
                bConnected 	:= TRUE;
                hSocket    	:= fbConnect.hSocket;
				iSTEP		:= STEP_ONConnect;	(* >> OnConnect >> *)
            ELSIF TimeInStep	> TimeOut THEN
				iSTEP		:=  STEP_Error; (* ReLoop *)
           END_IF
         END_IF;
	
	4: (*******************************************************)
		strDiagnose := 'Provide a SERVER';
	   (*******************************************************)
		fbAccept (bExecute		:= FALSE);
		fbListen (bExecute 		:= FALSE);

		fbListen (sSrvNetId		:= sSrvNetId,
					sLocalHost	:= sIPAddress,
					nLocalPort	:= nPort,
					tTimeout   	:= t#30s,
					bExecute	:= TRUE );
					
		iSTEP := iSTEP+1;
	5: (*******************************************************)
		strDiagnose := 'Wait for listener';
			fbListen(  bExecute := FALSE  );
			IF NOT fbListen.bBusy THEN
				IF NOT fbListen.bError THEN
					hListener 	:= fbListen.hListener;
					iStep 		:= iSTEP + 1;
				ELSE
					(*---------------------------------------------*)
					(* Report error to the outsiede                *)
					(*---------------------------------------------*)
					nErrId := fbListen.nErrId;
					IF nErrId = 16#8003 THEN //Port is already occupied 
						iSTEP:= -3;
					ELSE
						iStep := -1;
					END_IF;
				END_IF
			END_IF

	6:	(*******************************************************) 
		strDiagnose	:= 'enable acceptance of clients';
		fbAccept (bExecute		:= FALSE);
		fbAccept (hListener		:= hListener,
					 bExecute	:= TRUE ,
					tTIMEout	:= T#5S	);
						
			iStep	:=	iSTEP+1;

	7: (* wait for client connection *)
			fbAccept (bExecute  := FALSE);

			IF NOT  fbAccept.bBusy THEN  
				IF fbAccept.bError THEN (*FB_SocketAccept returned error!*)
					iStep := -2;
				ELSIF fbAccept.bAccepted THEN 
					hSocket 	:= fbAccept.hSocket;
					iStep  		:= 10;
					RETURN;
				END_IF;

			END_IF;
			
			IF TimeInStep >= tClientLookup  THEN
		 	   iStep := 6 ; (* enable accept again *)
			END_IF;

		
	(*******************************************************)		
	10: (* (10 )STEP_ONConnect *)
		strDiagnose := 'OnConnectEvent';
		bconnected 	:=TRUE;

		OnConnectEvent();
		iSTEP 		:= iSTEP+1; 

	11: (*******************************************************)	
		strDiagnose := 'Check Queue for data to send ';
		IF strSendQueue.uiCount > 0 THEN
			OnGetNextEvent();		// quicksort
			PrepareSendBuffer();	
	
			fbSocketSend( bExecute 	:= FALSE );
			fbSocketSend( hSocket 	:= hSocket,
						  pSrc 		:= ADR(strSendBuffer.arbyDATA),
						  cbLen 	:= udiSLEN,
						bExecute	:= TRUE );
						
			iSTEP	:= iSTEP + 1;
		END_IF;
		
	12: (*******************************************************)
      	fbSocketSend( bExecute 	:= FALSE );
		
   		IF NOT fbSocketSend.bBusy THEN
            IF NOT fbSocketSend.bError THEN
				IF tFireDelay <= T#0S THEN 
					iSTEP 	:= STEP_WAIT_SEND; (* ReLoop *)
				ELSE
					iSTEP 	:= iSTEP+1; 
				END_IF;
            ELSE
				iSTEP	:= STEP_Error;
            END_IF
        END_IF
		
	13: strDiagnose := 'Fire delay....';
		IF  TimeInStep > tFireDelay THEN 
				iSTEP 	:= STEP_WAIT_SEND; (* ReLoop *)
		ELSIF CheckParameterChange() THEN 
				iSTEP  := STEP_Error;
		END_IF;
ELSE 
		iSTEP := STEP_ERROR; 
END_CASE]]></ST>
    </Implementation>
    <Method Name="CheckOptions" Id="{6fe7dc63-eea5-45ba-ba77-229a0c93dcc4}">
      <Declaration><![CDATA[METHOD PRIVATE CheckOptions : UINT
VAR_INPUT
	Option		:enuOptions;		(* Support Optios: see declaration for more details  *)
END_VAR
VAR_IN_OUT
	xLEN		:UINT; 
END_VAR

VAR
	xSize		:uint; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	CheckOptions	:= 0;
	xSize			:= SIZEOF(aServiceBuffer);

CASE Option OF
		(*NoAction----------------------------------------------------------------------------------------------------------------------*)
	enuOptions.NONE: ;
		(*CheckLenByNul----------------------------------------------------------------------------------------------------------------------*)
	enuOptions.CheckNull:
			FOR i := 1 TO xSize DO
				IF aServiceBuffer[i]   = 0 THEN
					xLEN := i ;
	
					EXIT;
				END_IF;
			END_FOR;
		(*CheckLenByCRLF-----------------------------------------------------------------------------------------------------------------------*)
	enuOptions.CheckCRLF:
			FOR i := 1 TO xSize DO
				IF aServiceBuffer[i]   = 13 AND
					aServiceBuffer[i+1] = 10 THEN
					xLEN := i +2;
					EXIT;
				END_IF;
			END_FOR;
		(*CheckLenTerminateCRLF------------------------------------------------------------------------------------------------------------------------*)
	enuOptions.CheckAndTerminate_CRLF:
		FOR i := 1 TO xSize DO
			IF aServiceBuffer[i]   = 0 THEN
			(* check if  *)
				IF aServiceBuffer[i-2] = 16#D AND aServiceBuffer[i-1] = 16#A THEN
					//xLEN := i-1 ;
					EXIT; //already added
				END_IF;
				aServiceBuffer[i]	:= 16#D;
				aServiceBuffer[i+1]	:= 16#A;
				xLEN := i + 2 ;
				EXIT;
			END_IF;
		END_FOR;

	enuOptions.CheckAndTerminate_ETX:
		FOR i := 1 TO xSize DO
			IF aServiceBuffer[i]   = 0 THEN
			(* check if already added *)
				IF aServiceBuffer[i-1] = 16#3 THEN
					xLEN := i ;
					EXIT;
				END_IF;

				aServiceBuffer[i]	:= 16#3;
				xLEN := i+1 ;
				EXIT;
			END_IF;
		END_FOR;

	enuOptions.CheckAndTerminate_Custom:
		FOR i := 1 TO xSize DO
			IF aServiceBuffer[i]   = 0 THEN
			(* check if already added *)
				IF aServiceBuffer[i-1] = xEOT THEN
					xLEN := i ;
					EXIT;
				END_IF;

				aServiceBuffer[i]	:= xEOT;
				xLEN := i+1 ;
				EXIT;
			END_IF;
		END_FOR;
		
	END_CASE;
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckParameterChange" Id="{ed347416-37c7-47e5-8789-92c43a15435b}">
      <Declaration><![CDATA[METHOD INTERNAL CheckParameterChange : bool
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckParameterChange := 	nPort_OLD			<> nPort OR 				
								sIPAddress_OLD		<> sIPAddress OR	
								bAsClient_OLD		<> bAsClient OR 
								bEnable				<> TRUE; 
		
]]></ST>
      </Implementation>
    </Method>
    <Action Name="CheckReceiveData" Id="{500054a3-fc36-4947-ab56-6ed1c23b5e76}">
      <Implementation>
        <ST><![CDATA[(*---------------------------------------------*)
(* CheckReceiveData                            *)
(*---------------------------------------------*)

	IF bconnected AND (NOT fbSocketReceive.bBusy) AND (NOT fbSocketReceive.bExecute) THEN
		fbSocketReceive.bExecute :=TRUE;
	END_IF;

	IF (NOT bconnected) OR (fbSocketReceive.bBusy) THEN
		fbSocketReceive.bExecute :=FALSE;
	END_IF;
	
	fbSocketReceive(
				sSrvNetId	:= sSrvNetId,
				hSocket		:= hSocket,
				cbLen  		:= SIZEOF 	(ptReceiveBuffer^.arbyDATA),
				pDest  		:= ADR		(ptReceiveBuffer^.arbyDATA),
				tTimeout	:= T#5s);

	(* OnReceiveEvent *)				
	IF fbSocketReceive.nRecBytes >0  THEN 
		ptReceiveBuffer^.bJob := TRUE;
	END_IF
		
	(* Connection fail detection !!! *)
	IF 	(
		(fbSocketReceive.nErrId  = 16#8004) 
	OR 	(nPort_OLD		<> nPort)
	OR 	(sIPAddress_OLD	<> sIPAddress)
		)
	AND bConnected 
	AND iSTEP < 20 THEN
		bConnected 	:= FALSE;
		iSTEP 		:= STEP_Disconnect;
	END_IF; ]]></ST>
      </Implementation>
    </Action>
    <Action Name="OnConnectEvent" Id="{886aa338-89ef-45c8-8877-73e76b8815e3}">
      <Implementation>
        <ST><![CDATA[strSendQueue.uiCount := 0;
MemSet(destAddr := ADR(strSendQueue.STACK), fillByte := 0, n := SIZEOF (strSendQueue.STACK));


]]></ST>
      </Implementation>
    </Action>
    <Action Name="OnGetNextEvent" Id="{6bfe9ee7-84a5-4dff-b0e3-469d621b15b9}">
      <Implementation>
        <ST><![CDATA[	QueTools_SortPrio_ASC(x := strSendQueue );
	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="PrepareSendBuffer" Id="{a71bc2b7-b1fa-4b59-b725-d6618aef828e}">
      <Implementation>
        <ST><![CDATA[(*---------------------------------------------*)
(* Prepare Send Buffer                         *)
(*---------------------------------------------*)
	(* CLR send buffer befor loading data into it *)
	MemSet(destAddr := ADR (strSendBuffer.arbyDATA), fillByte := 0, n := SIZEOF (strSendBuffer.arbyDATA));
	
	udiSLEN := 0 ; 
	WHILE strSendQueue.uiCount > 0 DO  
		(* pull lowest queue element *)
		strSendQueue.actEntry     := strSendQueue.STACK[1];
		strSendQueue.iLastHAndle  := strSendQueue.actEntry.uiMsgHandle;
				
		(* copy data from source mem into Sendbuffer *)
		MEMCPY(destAddr  := ADR (strSendBuffer.arbyDATA)+ udiSLEN ,srcAddr :=ADR(strSendQueue.actEntry.aDATA), n := strSendQueue.actEntry.uiDATA );
		
		
		(*---------------------------------------------*)
		(* DECREMENT Stack                             *)
		(*---------------------------------------------*)
		strSendQueue.uiCount    := strSendQueue.uiCount - 1;
		FOR i := 1 TO Sewts_TCP.MAX_QUEUE_SIZE -1 DO
			strSendQueue.STACK[i] := strSendQueue.STACK[i+1];
		END_FOR;
		
		FOR i := 0 TO Sewts_TCP.MAX_QueueData DO strSendQueue.STACK[Sewts_TCP.MAX_QUEUE_SIZE].aDATA[i] := 0; END_FOR; 
		strSendQueue.STACK[Sewts_TCP.MAX_QUEUE_SIZE].byOption	:= 0;
		strSendQueue.STACK[Sewts_TCP.MAX_QUEUE_SIZE].uiPrio	:= 0;
		strSendQueue.STACK[Sewts_TCP.MAX_QUEUE_SIZE].uiDATA	:= 0;

		(*---------------------------------------------*)
		(* Lenght check *)
		(*---------------------------------------------*)
		IF ( strSendQueue.uiCount > 0	(* more entrys? *)
		AND  strSendQueue.STACK[1].uiDATA> 0 
		AND  strSendQueue.STACK[1].uiDATA + udiSLEN > Sewts_TCP.MAX_BUFFER_SIZE) 

		THEN 
			EXIT; 
		END_IF

		(*---------------------------------------------*)
		(* Paramater bCompactMessage                   *)
		(*---------------------------------------------*)
		IF NOT bCompactMessage THEN 
			EXIT; 
		END_IF
		
	END_WHILE;

]]></ST>
      </Implementation>
    </Action>
    <Method Name="QueTools_SortPrio_ASC" Id="{a79c2c42-7b7a-4376-9aaf-d3f48e572efe}">
      <Declaration><![CDATA[METHOD PRIVATE QueTools_SortPrio_ASC : BOOL
VAR_IN_OUT
	X			: strQueueContent;
END_VAR
VAR
	y			: strQueueContent;
	One			: strQueueContentDetail;
	LastCount	: UINT;
	bHandled	: ARRAY[1..Sewts_TCP.MAX_QUEUE_SIZE] OF BOOL;
	i			: UINT;
	j			: UINT;
	idx			: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[QueTools_SortPrio_ASC :=FALSE;

	IF x.uiCount < 2 THEN
		RETURN ;
	END_IF;

	IF LastCount > x.uiCount THEN
		LastCount  := x.uiCount ;
	  	RETURN;
	END_IF;
		LastCount  := x.uiCount ;

	FOR i := 1 TO Sewts_TCP.MAX_QUEUE_SIZE DO
	  bHandled[i] := FALSE;
	END_FOR;

	y.uiCount := 0;
	J := 1;

	REPEAT

		IF NOT bHandled[J] THEN
			One := X.STACK[J];
			idx := J;

			FOR i := 1 TO x.uiCount DO
				IF (One.uiPrio > x.STACK[i].uiPrio) AND (NOT bHandled[i])  AND (j <> i)  THEN
					One  := x.STACK[i];
					idx  := i;
				END_IF;
			END_FOR;

			bHandled[idx] := TRUE;
			Y.uiCount := Y.uiCount +1;
			y.STACK[Y.uiCount] := One;
			J := 1;
		ELSE
			j := j + 1;
		END_IF;

	UNTIL y.uiCount = x.uiCount
	END_REPEAT;


	FOR i := 1 TO x.uiCount DO
		x.STACK[i] := y.STACK[i];
	END_FOR;

	QueTools_SortPrio_ASC := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Action Name="TimingSystem" Id="{129255b7-859b-4620-b94f-1eb9951cc015}">
      <Implementation>
        <ST><![CDATA[	IF iSTEP <> ioldStep THEN
//			main.FileLogger.AddMessage(xChapter:= 'TCP STEP ',xMessage:= int_to_string(iSTEP));
			ioldStep := iSTEP ;
			tSTEP( IN := FALSE, PT := t#5s );
	END_IF;
	
	tSTEP( IN := TRUE, PT := T#60M );
	TimeInStep  := tSTEP.ET ;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitForClient" Id="{cbb672b4-bc8b-473c-9091-5c72d1229fb0}">
      <Implementation>
        <ST><![CDATA[(*	
	tcp_server		(xEnable := TRUE, ipAddr 	:= sIPAddr, uiPort := nPort);
		tcp_connections	(xEnable := TRUE, hServer 	:= tcp_server.hServer);
	
		IF tcp_connections.xActive THEN
			hConnection 	:= tcp_connections.hConnection;
			bConnected		:= TRUE;
			iSTEP 			:= STEP_ONConnect;
			
		ELSIF tcp_connections.xError OR CheckParameterChange() THEN 
			iSTEP 			:= STEP_Error;

		END_IF;			
	
*)]]></ST>
      </Implementation>
    </Action>
    <Method Name="WriteInQueue_by_ByteArray" Id="{e24f8aba-ecc4-4bbb-8350-a2c1819fc1de}">
      <Declaration><![CDATA[METHOD PUBLIC WriteInQueue_by_ByteArray : UDINT (* Message Handle *)
VAR_INPUT
	aDATA		: ARRAY[0..Sewts_TCP.MAX_QueueData] OF BYTE ;	(* DATA to be send *)
	uiDATA		: UINT;			    (* amout of byte to send, see also "Option" 		 *)
	Prio		: UINT ;	    	(* Optionale Parameter used for the quick sort       *)
END_VAR

VAR 
	uiLEN			:UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	(* init *)
	WriteInQueue_by_ByteArray := 0;
	(* some basic checks *)
	IF strSendQueue.uiCount >= Sewts_TCP.MAX_QUEUE_SIZE THEN
   	   strSendQueue.uiCount := Sewts_TCP.MAX_QUEUE_SIZE ;
		RETURN;
	END_IF;

	IF  strSendQueue.uiCount < 0 THEN
		strSendQueue.uiCount := 0;
	END_IF;

	(* INC stack queue idx  *)
	strSendQueue.uiCount := strSendQueue.uiCount + 1 ;

	(* peak load detection*)
	IF 	strSendQueue.uiCount > strSendQueue.uiMaxCount THEN
		strSendQueue.uiMaxCount := strSendQueue.uiCount;
	END_IF ;

	(* unique handle *)
	strSendQueue.iTelHandle := strSendQueue.iTelHandle + 1;
	
	(*---------------------------------------------*)
	(* Data to internal buffer *)
	(*---------------------------------------------*)
	MemCpy(destAddr:=ADR(aServiceBuffer),srcAddr := ADR(aData),n:=SIZEOF(aData));
	uiLEN			:= uiDATA;
	

	(* fill stack element *)
	strSendQueue.STACK[strSendQueue.uiCount].uiPrio			:= Prio;
	strSendQueue.STACK[strSendQueue.uiCount].uiMsgHandle	:= strSendQueue.iTelHandle;
	strSendQueue.STACK[strSendQueue.uiCount].aDATA			:= aServiceBuffer ;				(* updated element *)
	strSendQueue.STACK[strSendQueue.uiCount].uiDATA			:= uiLEN;

	(* return handle *)
	WriteInQueue_by_ByteArray := strSendQueue.iTelHandle;

		]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteInQueue_by_Pointer" Id="{de78bb8b-58aa-4b1c-9417-c938cd387702}">
      <Declaration><![CDATA[METHOD PUBLIC WriteInQueue_by_Pointer : UDINT (* Message Handle *)
VAR_INPUT
	pDATA		: POINTER TO BYTE ;	(* Pointer to Data to be send *)
	szDATA		: UINT;				(* amout of byte to send, see also "Option" *)
	Prio		:UINT ;	    		(* Optionale Parameter used for the quick sort       *)
END_VAR

VAR 
	i			:UINT;
END_VAR

VAR CONSTANT
	MaxLength :UINT := 255; 
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[	(* init *)
	WriteInQueue_by_Pointer := 0;
	IF szData > MaxLength THEN 
		RETURN; 
	END_IF
	
	
	(* some basic checks *)
	IF strSendQueue.uiCount >= Sewts_TCP.MAX_QUEUE_SIZE THEN
   	   strSendQueue.uiCount := Sewts_TCP.MAX_QUEUE_SIZE ;
		RETURN;
	END_IF;

	IF  strSendQueue.uiCount < 0 THEN
		strSendQueue.uiCount := 0;
	END_IF;

	(* INC stack queue idx  *)
	strSendQueue.uiCount := strSendQueue.uiCount + 1 ;

	(* peak load detection*)
	IF 	strSendQueue.uiCount > strSendQueue.uiMaxCount THEN
		strSendQueue.uiMaxCount := strSendQueue.uiCount;
	END_IF ;

	(* unique handle *)
	strSendQueue.iTelHandle := strSendQueue.iTelHandle + 1;
	
	(*---------------------------------------------*)
	(* Data to internal buffer *)
	(*---------------------------------------------*)
	FOR i := 0 TO Sewts_TCP.MAX_QueueData DO  aServiceBuffer[i] :=0; END_FOR;
 	MemCpy(destAddr:= ADR(aServiceBuffer),srcAddr:= pDATA ,n := szDATA);
	uiLEN			:= szDATA;
	(*---------------------------------------------*)
	(* Supporting routines now in here!!!          *)
	(*---------------------------------------------*)
	CheckOptions( Option := Option, xLEN:=uiLEN);
	
	(*---------------------------------------------*)
	(* fill stack element                          *)
	(*---------------------------------------------*)	
	strSendQueue.STACK[strSendQueue.uiCount].uiPrio			:= Prio;
	strSendQueue.STACK[strSendQueue.uiCount].byOption 		:= Option;
	strSendQueue.STACK[strSendQueue.uiCount].uiMsgHandle	:= strSendQueue.iTelHandle;
	strSendQueue.STACK[strSendQueue.uiCount].aDATA			:= aServiceBuffer ;				(* updated element *)
	strSendQueue.STACK[strSendQueue.uiCount].uiDATA			:= uiLEN;

	(* return handle *)
	WriteInQueue_by_Pointer := strSendQueue.iTelHandle;

	]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteInQueue_by_String" Id="{12cd49d6-5d9f-4306-a62c-8a08a777413f}">
      <Declaration><![CDATA[METHOD PUBLIC WriteInQueue_by_String : UDINT (* Message Handle *)
VAR_INPUT
	sString		:STRING(255);		(* string to be send *)
	Prio		:UINT ;	    		(* Optionale Parameter used for the quick sort       *)
END_VAR

VAR 
	i			:UINT;
	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	(* init *)
	WriteInQueue_by_String := 0;
	(* some basic checks *)
	IF strSendQueue.uiCount >= Sewts_TCP.MAX_QUEUE_SIZE THEN
   	   strSendQueue.uiCount := Sewts_TCP.MAX_QUEUE_SIZE ;
		RETURN;
	END_IF;

	IF  strSendQueue.uiCount < 0 THEN
		strSendQueue.uiCount := 0;
	END_IF;

	(* INC stack queue idx  *)
	strSendQueue.uiCount := strSendQueue.uiCount + 1 ;

	(* peak load detection*)
	IF 	strSendQueue.uiCount > strSendQueue.uiMaxCount THEN
		strSendQueue.uiMaxCount := strSendQueue.uiCount;
	END_IF ;

	(* unique handle *)
	strSendQueue.iTelHandle := strSendQueue.iTelHandle + 1;
	
	(*---------------------------------------------*)
	(* Data to internal buffer *)
	(*---------------------------------------------*)
	FOR i := 0 TO Sewts_TCP.MAX_QueueData DO  aServiceBuffer[i] :=0; END_FOR;
 	MemCpy(destAddr:= ADR(aServiceBuffer),srcAddr:= ADR(sString),n :=  INT_TO_UINT (LEN(sString)));
	
	uiLEN			:= INT_TO_UINT(LEN(sString));
	(*---------------------------------------------*)
	(* Supporting routines now in here!!!          *)
	(*---------------------------------------------*)
	CheckOptions( Option := Option, xLEN:=uiLEN);
	
	(*---------------------------------------------*)
	(* fill stack element                          *)
	(*---------------------------------------------*)	
	strSendQueue.STACK[strSendQueue.uiCount].uiPrio			:= Prio;
	strSendQueue.STACK[strSendQueue.uiCount].byOption 		:= Option;
	strSendQueue.STACK[strSendQueue.uiCount].uiMsgHandle	:= strSendQueue.iTelHandle;
	strSendQueue.STACK[strSendQueue.uiCount].aDATA			:= aServiceBuffer ;				(* updated element *)
	strSendQueue.STACK[strSendQueue.uiCount].uiDATA			:= uiLEN;

	(* return handle *)
	WriteInQueue_by_String := strSendQueue.iTelHandle;

	]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>