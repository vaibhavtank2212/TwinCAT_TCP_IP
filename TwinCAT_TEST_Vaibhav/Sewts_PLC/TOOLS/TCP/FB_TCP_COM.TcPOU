<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_TCP_COM" Id="{17040e54-2eca-43ad-af58-8cb09b7444f5}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_TCP_COM
VAR_INPUT
	
	bEnable			:BOOL;
	(* com parameter  *)
	
	nPort			:UINT		:= 2000;		(* SERVER: port to provide / CLIENT: port on server  				*)
	sIPAddress		:STRING (80):= '127.0.0.1';	(* SERVER: own network address to use / CLIENT: address of server 	*)
	(* send options*)
	tFireDelay		:TIME		:= T#0S;	(* betwenn two messages *)
	strSendData		:strSenddata;
END_VAR

VAR_OUTPUT
	bConnected		:BOOL;
	bError			:BOOL;	
	nErrId			:UDINT;				(* FB_SocketConnect Error ID  		                                         *)
	sError			:STRING[80];		(* Error text (out of TC help system 	                                     *)
	strOutputdata	:strRecivedata;
END_VAR
VAR
	// TCP Connection
	//tcp_ClientConnection	:FB_ClientServerConnection;
	
	// https://infosys.beckhoff.com/index.php?content=../content/1031/tf6310_tc3_tcpip/27021597848412555.html&id=
	(* client *)
	fbConnect       	: FB_SocketConnect 	:= ( sSrvNetId := '' );
   	fbClose        		: FB_SocketClose;
	(* server *)
	fbListen			: FB_SocketListen;
	fbAccept			: FB_SocketAccept;
    fbSocketSend 		: FB_SocketSend 	:= ( sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT );
    fbSocketReceive 	: FB_SocketReceive 	:= ( sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT );
	fbSocketCloseAll 	: FB_SocketCloseAll;
	sSrvNetId			:STRING 			:='';
	hListener          	: T_HSOCKET;
	hSocket         	: T_HSOCKET;
	


	
	
	//Helpers
	iSTEP				:INT	:= 3;	(* main sequence*)
	ioldStep			:INT;
	tSTEP				:TON;
	TimeInStep 			:TIME;	
	
	strDiagnose			:STRING; 
	udiHelp				:UDINT; 
	
	


	nPort_OLD			:UINT;				
	sIPAddress_OLD		:STRING;	
	bAsClient_OLD		:BOOL;	 	
	sSendData			: INT;
END_VAR

VAR CONSTANT 
	STEP_Error 		:INT 	:= -2;	
	STEP_ONConnect	:INT	:= 6;	
	STEP_WAIT_SEND	:INT   	:= 7; 
	TimeOut			:TIME	:= T#2S;
	tClientLookup	:TIME 	:= T#5100MS; (* (server)  timeout to enable accept   *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TimingSystem();

CASE iSTEP OF
	-3:	(*******************************************************)
	 	fbSocketCloseAll( sSrvNetId:= '', bExecute:= TRUE, tTimeout:= T#10S );
		IF NOT fbSocketCloseAll.bBusy THEN
			iSTEP	:= iSTEP+1;
		END_IF;		

	STEP_Error: (******** -2 STEP ERROR***********)	 
	 	strDiagnose := 'STEP ERROR ';
		fbSocketCloseAll( bExecute:= FALSE );
		
			fbClose.sSrvNetId 	:= sSrvNetId;
			fbClose.tTimeout	:= DEFAULT_ADS_TIMEOUT;
			fbClose( bExecute	:= FALSE );
			fbClose.hSocket:= hListener;
			fbClose.hSocket:= hSocket;
			
			fbClose( bExecute	:= TRUE); 	
		(* reset all executes *)
		fbConnect		(bExecute 	:= FALSE);
		
		iSTEP := iSTEP + 1; 
		
	-1: (*******************************************************)
		strDiagnose := 'error pause';
		fbClose( bExecute	:= FALSE );
		bConnected	:= FALSE;
		
		IF TimeInStep > TimeOut THEN
			bError	:= FALSE;
			iSTEP 	:= 0;
		END_IF

	0: 	(*******************************************************)
		strDiagnose := 'wait for enable';
		IF bEnable THEN
			iSTEP := iSTEP + 1; 
		END_IF
		
	1: 	(*******************************************************)
		strDiagnose := 'start / init';
		nPort_OLD			:= nPort;				
		sIPAddress_OLD		:= sIPAddress;	
 		bConnected			:= FALSE;
		
	
	2: (*******************************************************)
		strDiagnose := 'Provide a SERVER';
	   (*******************************************************)
		fbAccept (bExecute		:= FALSE);
		fbListen (bExecute 		:= FALSE);
		fbListen (sSrvNetId		:= sSrvNetId,
					sLocalHost	:= sIPAddress,
					nLocalPort	:= nPort,
					tTimeout   	:= t#30s,
					bExecute	:= TRUE );		
		iSTEP := iSTEP+1;
	3: (*******************************************************)
		strDiagnose := 'Wait for listener';
			fbListen(  bExecute := FALSE  );
			IF NOT fbListen.bBusy THEN
				IF NOT fbListen.bError THEN
					hListener 	:= fbListen.hListener;
					iStep 		:= iSTEP + 1;
				ELSE
					(*---------------------------------------------*)
					(* Report error to the outsiede                *)
					(*---------------------------------------------*)
					nErrId := fbListen.nErrId;
					IF nErrId = 16#8003 THEN //Port is already occupied 
						iSTEP:= -3;
					ELSE
						iStep := -1;
					END_IF;
				END_IF
			END_IF

	4:	(*******************************************************) 
		strDiagnose	:= 'enable acceptance of clients';
		fbAccept (bExecute		:= FALSE);
		fbAccept (hListener		:= hListener,
					 bExecute	:= TRUE ,
					tTIMEout	:= T#5S	);
						
			iStep	:=	iSTEP+1;

	5: (* wait for client connection *)
			fbAccept (bExecute  := FALSE);

			IF NOT  fbAccept.bBusy THEN  
				IF fbAccept.bError THEN (*FB_SocketAccept returned error!*)
					iStep := -2;
				ELSIF fbAccept.bAccepted THEN 
					hSocket 	:= fbAccept.hSocket;
					iStep  		:= 10;
					RETURN;
				END_IF;

			END_IF;
			
			IF TimeInStep >= tClientLookup  THEN
		 	   iStep := 6 ; (* enable accept again *)
			END_IF;

		
	(*******************************************************)		
STEP_ONConnect: (* (10 )STEP_ONConnect and recieve data *)
				strDiagnose := 'OnConnectEvent';
				bconnected 	:=TRUE;
				CheckReceiveData();
				iSTEP 		:= iSTEP+1; 

STEP_WAIT_SEND: (*******************************************************)	
		strDiagnose := 'Check Queue for data to send ';	
			fbSocketSend( bExecute 	:= FALSE );
			fbSocketSend( hSocket 	:= hSocket,
						  pSrc 		:= ADR(strSendData),
						  cbLen 	:= LEN(strSendData),
						bExecute	:= TRUE );	
			iSTEP	:= iSTEP + 1;
	
	8: (*******************************************************)
      	fbSocketSend( bExecute 	:= FALSE );
		
   		IF NOT fbSocketSend.bBusy THEN
            IF NOT fbSocketSend.bError THEN
				IF tFireDelay <= T#0S THEN 
					iSTEP 	:= STEP_WAIT_SEND; (* ReLoop *)
				ELSE
					iSTEP 	:= iSTEP+1; 
				END_IF;
            ELSE
				iSTEP	:= STEP_Error;
            END_IF
        END_IF		
		
	9: strDiagnose := 'Fire delay....';
		IF  TimeInStep > tFireDelay THEN 
				iSTEP 	:= STEP_ONConnect; (* ReLoop *)
		END_IF;
END_CASE]]></ST>
    </Implementation>
    <Method Name="CheckParameterChange" Id="{ed347416-37c7-47e5-8789-92c43a15435b}">
      <Declaration><![CDATA[METHOD INTERNAL CheckParameterChange : bool
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckParameterChange := 	nPort_OLD			<> nPort OR 				
								sIPAddress_OLD		<> sIPAddress OR	
								bEnable				<> TRUE; 
		
]]></ST>
      </Implementation>
    </Method>
    <Action Name="CheckReceiveData" Id="{500054a3-fc36-4947-ab56-6ed1c23b5e76}">
      <Implementation>
        <ST><![CDATA[(*---------------------------------------------*)
(* CheckReceiveData                            *)
(*---------------------------------------------*)

	IF bconnected AND (NOT fbSocketReceive.bBusy) AND (NOT fbSocketReceive.bExecute) THEN
		fbSocketReceive.bExecute :=TRUE;
	END_IF;

	IF (NOT bconnected) OR (fbSocketReceive.bBusy) THEN
		fbSocketReceive.bExecute :=FALSE;
	END_IF;
	
	fbSocketReceive(
				sSrvNetId	:= sSrvNetId,
				hSocket		:= hSocket,
				cbLen  		:= LEN(strOutputdata),
				pDest  		:= ADR(strOutputdata),
				tTimeout	:= T#5s);

	
		
	(* Connection fail detection !!! *)
	IF 	(
		(fbSocketReceive.nErrId  = 16#8004) 
	OR 	(nPort_OLD		<> nPort)
	OR 	(sIPAddress_OLD	<> sIPAddress)
		)
	AND bConnected 
	AND iSTEP < 20 THEN
		bConnected 	:= FALSE;
		iSTEP 		:= STEP_Error;
	END_IF; ]]></ST>
      </Implementation>
    </Action>
    <Action Name="TimingSystem" Id="{129255b7-859b-4620-b94f-1eb9951cc015}">
      <Implementation>
        <ST><![CDATA[	IF iSTEP <> ioldStep THEN
//			main.FileLogger.AddMessage(xChapter:= 'TCP STEP ',xMessage:= int_to_string(iSTEP));
			ioldStep := iSTEP ;
			tSTEP( IN := FALSE, PT := t#5s );
	END_IF;
	
	tSTEP( IN := TRUE, PT := T#60M );
	TimeInStep  := tSTEP.ET ;
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>